"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const g=require("@rollup/plugin-inject"),m=require("node:module"),h=require("node-stdlib-browser"),y=require("node-stdlib-browser/helpers/esbuild/plugin"),B=require("node-stdlib-browser/helpers/rollup/plugin"),a=e=>e&&e.__esModule?e:{default:e},P=a(g),_=a(h),$=a(y),q=["buffer","global","process"].flatMap(e=>[e,`node:${e}`]),c=e=>e?e===!0?!0:e==="build":!1,i=e=>e?e===!0?!0:e==="dev":!1,v=e=>e.startsWith("node:"),j=(e={})=>{const o=m.createRequire(typeof document>"u"?require("url").pathToFileURL(__filename).href:document.currentScript&&document.currentScript.src||new URL("index.cjs",document.baseURI).href).resolve("vite-plugin-node-polyfills/shims"),l={include:[],exclude:[],protocolImports:!0,...e,globals:{Buffer:!0,global:!0,process:!0,...e.globals}},p=n=>l.exclude.some(s=>n===s||n===`node:${s}`),b=n=>l.include.some(s=>n===s||n===`node:${s}`);return{name:"vite-plugin-node-polyfills",config:(n,s)=>{const u=s.mode==="development",d=Object.entries(_.default).reduce((t,[r,f])=>(!l.protocolImports&&v(r)||(l.include.length?b(r):!p(r))&&(t[r]=q.includes(r)?o:f),t),{});return{build:{rollupOptions:{onwarn:(t,r)=>{B.handleCircularDependancyWarning(t,r)},plugins:[{...P.default({...c(l.globals.Buffer)?{Buffer:[o,"Buffer"]}:{},...c(l.globals.global)?{global:[o,"global"]}:{},...c(l.globals.process)?{process:[o,"process"]}:{}})}]}},esbuild:{banner:[u&&i(l.globals.Buffer)?`import { Buffer as BufferPolyfill } from '${o}'
globalThis.Buffer = BufferPolyfill`:"",u&&i(l.globals.global)?`import { global as globalPolyfill } from '${o}'
globalThis.global = globalPolyfill`:"",u&&i(l.globals.process)?`import { process as processPolyfill } from '${o}'
globalThis.process = processPolyfill`:""].join(`
`)},optimizeDeps:{esbuildOptions:{define:{...i(l.globals.Buffer)?{Buffer:"Buffer"}:{},...i(l.globals.global)?{global:"global"}:{},...i(l.globals.process)?{process:"process"}:{}},inject:[o],plugins:[$.default(d),{name:"vite-plugin-node-polyfills-shims-resolver",setup(t){const r=o.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),f=new RegExp(`^${r}$`);t.onResolve({filter:f},()=>({external:!1,path:o}))}}]}},resolve:{alias:{...d}}}}}};exports.nodePolyfills=j;
//# sourceMappingURL=index.cjs.map
